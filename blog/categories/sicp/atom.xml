<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: sicp | Keep faith, Stay strong]]></title>
  <link href="http://wear.github.com/blog/categories/sicp/atom.xml" rel="self"/>
  <link href="http://wear.github.com/"/>
  <updated>2012-08-31T12:01:40+08:00</updated>
  <id>http://wear.github.com/</id>
  <author>
    <name><![CDATA[KongLingLiang]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[搭建一个良好的SICP Editor]]></title>
    <link href="http://wear.github.com/blog/2012/08/26/da-jian-%5B%3F%5D-ge-liang-hao-de-sicp-editor/"/>
    <updated>2012-08-26T11:17:00+08:00</updated>
    <id>http://wear.github.com/blog/2012/08/26/da-jian-[?]-ge-liang-hao-de-sicp-editor</id>
    <content type="html"><![CDATA[<p>为了做SICP的习题，需要一个合适的PLT scheme环境，官方的那个编辑器实在不好用。</p>

<p>网上找到的一个比较友好的Lisp编辑器是Racket,但是它默认支持的语言对PLT scheme支持的不好。还好已经有人给做
了一个专门的语言包，安装一下就可以合用了。</p>

<p>包地址：http://www.neilvandyke.org/racket-sicp/
Rocket地址：http://racket-lang.org/</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[sicp练习2]]></title>
    <link href="http://wear.github.com/blog/2012/08/24/sicplian-xi-2/"/>
    <updated>2012-08-24T09:38:00+08:00</updated>
    <id>http://wear.github.com/blog/2012/08/24/sicplian-xi-2</id>
    <content type="html"><![CDATA[<h3>练习1.14</h3>

<p>图就不画了
步长是5<sup>n,</sup></p>

<h3>练习1.15</h3>

<p>skip for now</p>

<h3>练习1.16</h3>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="p">(</span><span class="n">define</span> <span class="p">(</span><span class="n">fast</span><span class="o">-</span><span class="n">expt</span> <span class="n">x</span> <span class="n">n</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="n">fast</span><span class="o">-</span><span class="n">expt</span><span class="o">-</span><span class="n">iter</span> <span class="n">x</span> <span class="n">n</span> <span class="mi">1</span><span class="p">))</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;(define (square x) (* x x))&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span><span class="p">(</span><span class="n">define</span> <span class="p">(</span><span class="n">fast</span><span class="o">-</span><span class="n">expt</span><span class="o">-</span><span class="n">iter</span> <span class="n">x</span> <span class="n">n</span> <span class="n">a</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="n">cond</span> <span class="p">((</span><span class="o">=</span> <span class="n">n</span> <span class="mi">1</span><span class="p">)</span> <span class="p">(</span><span class="o">*</span> <span class="n">a</span> <span class="n">x</span><span class="p">))</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt;    ((even? n) (fast-expt-iter (square x) </span>
</span><span class='line'><span class="sr">                               (/</span> <span class="n">n</span> <span class="mi">2</span><span class="p">)</span>
</span><span class='line'>                               <span class="n">a</span><span class="p">))</span>
</span><span class='line'>    <span class="p">(</span><span class="k">else</span> <span class="p">(</span><span class="n">fast</span><span class="o">-</span><span class="n">expt</span><span class="o">-</span><span class="n">iter</span> <span class="n">x</span>
</span><span class='line'>                          <span class="p">(</span><span class="o">-</span> <span class="n">n</span> <span class="mi">1</span><span class="p">)</span>
</span><span class='line'>                          <span class="p">(</span><span class="o">*</span> <span class="n">a</span> <span class="n">x</span><span class="p">)))))</span>
</span><span class='line'><span class="o">&lt;</span><span class="sr">/code&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
(fast-expt 2 4)</p>

<h3>练习1.17</h3>

<p>skip for now</p>

<h3>练习1.18</h3>

<p>skip for now</p>

<h3>练习1.19</h3>

<p>skip for now</p>

<h3>练习1.20</h3>

<p>欧几里得算法
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="p">(</span><span class="n">define</span> <span class="p">(</span><span class="n">gcd</span> <span class="n">a</span> <span class="n">b</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="k">if</span> <span class="p">(</span><span class="o">=</span> <span class="n">b</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>  <span class="n">b</span>
</span><span class='line'>  <span class="n">gcd</span><span class="p">(</span><span class="n">b</span> <span class="p">(</span><span class="n">remainder</span> <span class="n">a</span> <span class="n">b</span><span class="p">))))</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
其中实际的remainder运算应该是取余的一个过程</p>

<p>采用正则序，计算(gcd 206 40)
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="p">(</span><span class="n">gcd</span> <span class="mi">40</span> <span class="p">(</span><span class="n">remainder</span> <span class="mi">206</span> <span class="mi">40</span><span class="p">))</span>
</span><span class='line'>  <span class="c1"># 判断(remainder 206 40),这里是6，是否等于0，产生一次remainder运算,继续展开</span>
</span><span class='line'>  <span class="p">(</span><span class="n">gcd</span> <span class="p">(</span><span class="n">remainder</span> <span class="mi">206</span> <span class="mi">40</span><span class="p">)</span> <span class="p">(</span><span class="n">remainder</span> <span class="mi">40</span> <span class="p">(</span><span class="n">remainder</span> <span class="mi">206</span> <span class="mi">40</span><span class="p">)))</span>
</span><span class='line'>  <span class="c1"># 判断(remainder 40 (remainder 206 40))，这里是4，是否等于0,产生2次remainder运算，继续展开</span>
</span><span class='line'>  <span class="p">(</span><span class="n">gcd</span> <span class="p">(</span><span class="n">remainder</span> <span class="mi">40</span> <span class="p">(</span><span class="n">remainder</span> <span class="mi">206</span> <span class="mi">40</span><span class="p">))</span> <span class="p">(</span><span class="n">remainder</span> <span class="p">(</span><span class="n">remainder</span> <span class="mi">206</span> <span class="mi">40</span><span class="p">)</span> <span class="p">(</span><span class="n">remainder</span> <span class="mi">40</span> <span class="p">(</span><span class="n">remainder</span> <span class="mi">206</span> <span class="mi">40</span><span class="p">))))</span>
</span><span class='line'>  <span class="c1"># 判断 (remainder (remainder 206 40) (remainder 40 (remainder 206 40)))，这里是2，是否等于0，产生4次remainder,继续展开</span>
</span><span class='line'>  <span class="p">(</span><span class="n">gcd</span> <span class="p">(</span><span class="n">remainder</span> <span class="p">(</span><span class="n">remainder</span> <span class="mi">206</span> <span class="mi">40</span><span class="p">)</span> <span class="p">(</span><span class="n">remainder</span> <span class="mi">40</span> <span class="p">(</span><span class="n">remainder</span> <span class="mi">206</span> <span class="mi">40</span><span class="p">)))</span> <span class="p">(</span><span class="n">remainder</span> <span class="p">(</span><span class="n">remainder</span> <span class="mi">40</span> <span class="p">(</span><span class="n">remainder</span> <span class="mi">206</span> <span class="mi">40</span><span class="p">))</span> <span class="p">(</span><span class="n">remainder</span> <span class="p">(</span><span class="n">remainder</span> <span class="mi">206</span> <span class="mi">40</span><span class="p">)</span> <span class="p">(</span><span class="n">remainder</span> <span class="mi">40</span> <span class="p">(</span><span class="n">remainder</span> <span class="mi">206</span> <span class="mi">40</span><span class="p">)))))</span>
</span><span class='line'>  <span class="c1"># 判断(remainder (remainder 40 (remainder 206 40)) (remainder (remainder 206 40) (remainder 40 (remainder 206 40))))),这里是0，是否等于0，产生7次remainder运算,已经等于0，直接计算(remainder (remainder 206 40) (remainder 40 (remainder 206 40))),产生4此remainder运算，所以共18次运算&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>采用应用序的产生4次remainder运算</p>

<h3>练习1.21</h3>

<p>skip for now</p>

<h3>练习1.22</h3>

<p>skip for now</p>

<h3>练习1.23</h3>

<p>skip for now</p>

<h3>练习1.24</h3>

<p>skip for now</p>

<h3>练习1.25</h3>

<p>skip for now</p>

<h3>练习1.26</h3>

<p>skip for now</p>

<h3>练习1.27</h3>

<p>skip for now</p>

<h3>练习1.28</h3>

<p>skip for now</p>
]]></content>
  </entry>
  
</feed>
